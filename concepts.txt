.env
[
  environment variable file
]

[
  to test the APIs we need a HTTP client.(like thunderClient or Postman)
]

after creating contactRoutes
[
  Now we are going to create the controllers, so that controllers is going to contain all our logic for the
  request response and it is going to connect with our database.
]

after creating contactController
[
  the next thing we are going to do is accept the body from the request
]

[
  whenever you need to accept some data from the client to our server, we need to use a body parser so that we can
  parse the stream of data that we are recieving from the client.

  for that we need to use a middleware, and express provide us a middleware for the json object which we can get from
  the client.

  express.json(); will provide the parser
]

[
  the error comes in the form of HTML format, but we need in json format and to change this, we need to create
  a custom middleware which is going to accept the request response and then in between its going to transform 
  the response into a JSON. 
]

after errorHandler:
[
  Since, we are going to use Mongodb and the Mongoose, so whenever we interact with the Mongodb we always get a promise.

  In order to resolve that promise, we are going to make use of async await
]

[
  now since whenever we use the async and if we want to catch an error we need to make use of a try catch block and
  in order to do the try catch block we have to add the try catch Block in each of the functions(contactController).

  But there is an better way to do this and that's where we can make use of a middleware which is an express async handler,
  which is going to handle our exceptions inside the async express routes and then it's going to pass them to the
  express errorHandler which we have created here.

  lets install the express async handler -> npm install --save express-async-handler

  and import that in contactController.
]

[
  in order to use the asyncHandler you have to wrap your whole async function inside asyncHandler.

  Now, we don't have to write all the try catch blocks in order to catch the errors.
]

[
  now we need to setup Mongodb:
  [
    create account with email.

    setup up the account.

    choose AWS 

    set cluster name and create cluster

    set username:admin
    set password:manthan

    select connect from local environment
    add your current IP

    Collection is kind of database and inside collections you can store the records in the form of json object.

    inside Collection, create database:
    [
      database -------> mycontacts-backend
      collection --------> contacts
    ]

    now to connect you can use different methods:
    [
      use Mongodb Compass and VScode Mongodb extension

      setup the connection string in VScode and Mongodb Compass

      change <password> -------> manthan

      now to connect with Mongodb Compass we need to setup connection string:
      [
        inside env file
        CONNECTION_STRING = ...........mongodb.net/mycontacts-backend?retry.....................
      ]
    ]

    now to connect with our mongodb database we will need a Mongoose Which is a object model design schema for
    our entities like contacts or user and it help us to communicate with the Mongodb database.
    [
      dbConnection.js
    ]

    and setting up the dbConnection.js, you have to call the connectDb inside the server.js
  ]
]

now next is to create schema for our contacts:
[
  create folder named ----> models.

  now we need to create contactSchema, this will have all the values that we want in our contact resource.

  then export the contactSchema

  and we will use this in the contactController.
]

now contactSchema(Contact) gives us CRUD operations so that we can communicate with the database.

now the next thing we need to do is to introduce the authentication:
[
  we are going to provide some endpoints which will help a user to register themself and login.
  and once they login they can use a access token and with the help of the access token they can manage their contacts.
]

lets add another route:
[
  userRoutes ----> setup the express.Router()
  and create register, login and current routes.
]

now we will create userController.js:
[
  and setup the route control.
]

now for registering user, we will create userModel.

now we will setup userController:
[
  registerUser  ----> userAvailable or not 
  [
    for creating a new user we need to encrypt the password(hash) and we can do this by using bcrypt package.
    [
      bcrypt.hash(password, solved_rounds---> 10) and it provide us promise, so we need to use await before it.

    ]
    we will have unique users on the basis of email.
  ]

  now we will create an end point for login.
]

login endpoint:
[
  whenever a user is login we get an access token and for that we going to make use of json web token(JWT).

  whenever the client sends login email and password, we need to match the password with the hashed password
  using bcrypt.compare(password, hashedPassword) and when it matches, we provide user a access token.

  if the password matches we need to add access token in the response:
  [
    inside token we have ----> payload, ACCESS_TOKEN_SECRET, expiration time of our token
  ]

  and by using the access token we can access all the private routes.
]

json web token consists of 3 parts:
[
  firstPart: Header algorithm of token

  secondPart: payload(user information)

  thirdPart: signature verification

  [
    and for this we need to install json web token ------>>>>>>> npm install jsonwebtoken
  ]
]

to fetch the value from .env file:
[
  use process module:[
    process.env.ACCESS_TOKEN_SECRET
  ]
]

..........................
we will need a middleware to validate the token which a client is sending in our request as a bearer token:
[
  validateTokenHandler.js is used for validating the token.
  
  and we will use jwt.verify(token, secret, callback function) to verify the token
]

whenever a user is sending a request the token is actually passed in the header section with the auth field.
{
  you can put it inside header or inside bearer any will work.
}

Now we have successfully verified the json web token.
now what we need to do is whenever someone is requesting the current user information, we need to go to the database
in the Mongodb and then we need to fetch the information and then provide it as a response. ---->>> res.json(req.user);

now the next thing we need to do is we need to protect all our contacts routes, so only a logged in user will be able to 
perform CRUD operations on the contacts that they have created for themselves.